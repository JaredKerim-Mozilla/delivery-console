// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<PreferenceRolloutFields> <RowField> should work 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <RowField
    defaultValues={
      Object {
        "boolean": false,
        "integer": 0,
        "string": "",
      }
    }
    disableRemove={false}
    disabled={false}
    row={
      Object {
        "name": "name",
        "type": "string",
        "value": "Peter",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "align": "bottom",
      "children": Array [
        <Col
          span={6}
        >
          <Wrapper
            initialValue="name"
            label="Name"
            name="arguments.preferences.undefined.name"
          >
            <Input
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-input"
              type="text"
            />
          </Wrapper>
        </Col>,
        <Col
          span={4}
        >
          <Wrapper
            initialValue="string"
            label="Type"
            name="arguments.preferences.undefined.type"
          >
            <Select
              choiceTransitionName="zoom"
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-select"
              showSearch={false}
              transitionName="slide-up"
            >
              <Option
                value="string"
              >
                String
              </Option>
              <Option
                value="boolean"
              >
                Boolean
              </Option>
              <Option
                value="integer"
              >
                Integer
              </Option>
            </Select>
          </Wrapper>
        </Col>,
        <Col
          span={10}
        >
          <Wrapper
            initialValue="Peter"
            label="Value"
            name="arguments.preferences.undefined.value"
          >
            <Input
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-input"
              type="text"
            />
          </Wrapper>
        </Col>,
        <Col
          span={4}
          style={
            Object {
              "textAlign": "right",
            }
          }
        >
          <div
            className="ant-form-item-no-colon"
          >
            <div
              className="ant-form-item-label"
            >
              <label>
                 
              </label>
            </div>
            <div>
              <Button
                block={false}
                disabled={false}
                ghost={false}
                icon="close"
                id="undefined.remove-row"
                loading={false}
                onClick={[Function]}
                prefixCls="ant-btn"
                title={null}
                type="default"
              >
                Remove Row
              </Button>
            </div>
          </div>
        </Col>,
      ],
      "gutter": 8,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Wrapper
            initialValue="name"
            label="Name"
            name="arguments.preferences.undefined.name"
          >
            <Input
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-input"
              type="text"
            />
          </Wrapper>,
          "span": 6,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Input
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-input"
              type="text"
            />,
            "initialValue": "name",
            "label": "Name",
            "name": "arguments.preferences.undefined.name",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "disabled": false,
              "onChange": [Function],
              "prefixCls": "ant-input",
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Wrapper
            initialValue="string"
            label="Type"
            name="arguments.preferences.undefined.type"
          >
            <Select
              choiceTransitionName="zoom"
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-select"
              showSearch={false}
              transitionName="slide-up"
            >
              <Option
                value="string"
              >
                String
              </Option>
              <Option
                value="boolean"
              >
                Boolean
              </Option>
              <Option
                value="integer"
              >
                Integer
              </Option>
            </Select>
          </Wrapper>,
          "span": 4,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Select
              choiceTransitionName="zoom"
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-select"
              showSearch={false}
              transitionName="slide-up"
            >
              <Option
                value="string"
              >
                String
              </Option>
              <Option
                value="boolean"
              >
                Boolean
              </Option>
              <Option
                value="integer"
              >
                Integer
              </Option>
            </Select>,
            "initialValue": "string",
            "label": "Type",
            "name": "arguments.preferences.undefined.type",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Option
                  value="string"
                >
                  String
                </Option>,
                <Option
                  value="boolean"
                >
                  Boolean
                </Option>,
                <Option
                  value="integer"
                >
                  Integer
                </Option>,
              ],
              "choiceTransitionName": "zoom",
              "disabled": false,
              "onChange": [Function],
              "prefixCls": "ant-select",
              "showSearch": false,
              "transitionName": "slide-up",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "String",
                  "value": "string",
                },
                "ref": null,
                "rendered": "String",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Boolean",
                  "value": "boolean",
                },
                "ref": null,
                "rendered": "Boolean",
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Integer",
                  "value": "integer",
                },
                "ref": null,
                "rendered": "Integer",
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Wrapper
            initialValue="Peter"
            label="Value"
            name="arguments.preferences.undefined.value"
          >
            <Input
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-input"
              type="text"
            />
          </Wrapper>,
          "span": 10,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Input
              disabled={false}
              onChange={[Function]}
              prefixCls="ant-input"
              type="text"
            />,
            "initialValue": "Peter",
            "label": "Value",
            "name": "arguments.preferences.undefined.value",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "disabled": false,
              "onChange": [Function],
              "prefixCls": "ant-input",
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="ant-form-item-no-colon"
          >
            <div
              className="ant-form-item-label"
            >
              <label>
                 
              </label>
            </div>
            <div>
              <Button
                block={false}
                disabled={false}
                ghost={false}
                icon="close"
                id="undefined.remove-row"
                loading={false}
                onClick={[Function]}
                prefixCls="ant-btn"
                title={null}
                type="default"
              >
                Remove Row
              </Button>
            </div>
          </div>,
          "span": 4,
          "style": Object {
            "textAlign": "right",
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="ant-form-item-label"
              >
                <label>
                   
                </label>
              </div>,
              <div>
                <Button
                  block={false}
                  disabled={false}
                  ghost={false}
                  icon="close"
                  id="undefined.remove-row"
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  title={null}
                  type="default"
                >
                  Remove Row
                </Button>
              </div>,
            ],
            "className": "ant-form-item-no-colon",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <label>
                   
                </label>,
                "className": "ant-form-item-label",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": " ",
                },
                "ref": null,
                "rendered": " ",
                "type": "label",
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Button
                  block={false}
                  disabled={false}
                  ghost={false}
                  icon="close"
                  id="undefined.remove-row"
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  title={null}
                  type="default"
                >
                  Remove Row
                </Button>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": false,
                  "children": "Remove Row",
                  "disabled": false,
                  "ghost": false,
                  "icon": "close",
                  "id": "undefined.remove-row",
                  "loading": false,
                  "onClick": [Function],
                  "prefixCls": "ant-btn",
                  "title": null,
                  "type": "default",
                },
                "ref": null,
                "rendered": "Remove Row",
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "align": "bottom",
        "children": Array [
          <Col
            span={6}
          >
            <Wrapper
              initialValue="name"
              label="Name"
              name="arguments.preferences.undefined.name"
            >
              <Input
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-input"
                type="text"
              />
            </Wrapper>
          </Col>,
          <Col
            span={4}
          >
            <Wrapper
              initialValue="string"
              label="Type"
              name="arguments.preferences.undefined.type"
            >
              <Select
                choiceTransitionName="zoom"
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-select"
                showSearch={false}
                transitionName="slide-up"
              >
                <Option
                  value="string"
                >
                  String
                </Option>
                <Option
                  value="boolean"
                >
                  Boolean
                </Option>
                <Option
                  value="integer"
                >
                  Integer
                </Option>
              </Select>
            </Wrapper>
          </Col>,
          <Col
            span={10}
          >
            <Wrapper
              initialValue="Peter"
              label="Value"
              name="arguments.preferences.undefined.value"
            >
              <Input
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-input"
                type="text"
              />
            </Wrapper>
          </Col>,
          <Col
            span={4}
            style={
              Object {
                "textAlign": "right",
              }
            }
          >
            <div
              className="ant-form-item-no-colon"
            >
              <div
                className="ant-form-item-label"
              >
                <label>
                   
                </label>
              </div>
              <div>
                <Button
                  block={false}
                  disabled={false}
                  ghost={false}
                  icon="close"
                  id="undefined.remove-row"
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  title={null}
                  type="default"
                >
                  Remove Row
                </Button>
              </div>
            </div>
          </Col>,
        ],
        "gutter": 8,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Wrapper
              initialValue="name"
              label="Name"
              name="arguments.preferences.undefined.name"
            >
              <Input
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-input"
                type="text"
              />
            </Wrapper>,
            "span": 6,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Input
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-input"
                type="text"
              />,
              "initialValue": "name",
              "label": "Name",
              "name": "arguments.preferences.undefined.name",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "disabled": false,
                "onChange": [Function],
                "prefixCls": "ant-input",
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Wrapper
              initialValue="string"
              label="Type"
              name="arguments.preferences.undefined.type"
            >
              <Select
                choiceTransitionName="zoom"
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-select"
                showSearch={false}
                transitionName="slide-up"
              >
                <Option
                  value="string"
                >
                  String
                </Option>
                <Option
                  value="boolean"
                >
                  Boolean
                </Option>
                <Option
                  value="integer"
                >
                  Integer
                </Option>
              </Select>
            </Wrapper>,
            "span": 4,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Select
                choiceTransitionName="zoom"
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-select"
                showSearch={false}
                transitionName="slide-up"
              >
                <Option
                  value="string"
                >
                  String
                </Option>
                <Option
                  value="boolean"
                >
                  Boolean
                </Option>
                <Option
                  value="integer"
                >
                  Integer
                </Option>
              </Select>,
              "initialValue": "string",
              "label": "Type",
              "name": "arguments.preferences.undefined.type",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Option
                    value="string"
                  >
                    String
                  </Option>,
                  <Option
                    value="boolean"
                  >
                    Boolean
                  </Option>,
                  <Option
                    value="integer"
                  >
                    Integer
                  </Option>,
                ],
                "choiceTransitionName": "zoom",
                "disabled": false,
                "onChange": [Function],
                "prefixCls": "ant-select",
                "showSearch": false,
                "transitionName": "slide-up",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "String",
                    "value": "string",
                  },
                  "ref": null,
                  "rendered": "String",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Boolean",
                    "value": "boolean",
                  },
                  "ref": null,
                  "rendered": "Boolean",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Integer",
                    "value": "integer",
                  },
                  "ref": null,
                  "rendered": "Integer",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Wrapper
              initialValue="Peter"
              label="Value"
              name="arguments.preferences.undefined.value"
            >
              <Input
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-input"
                type="text"
              />
            </Wrapper>,
            "span": 10,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Input
                disabled={false}
                onChange={[Function]}
                prefixCls="ant-input"
                type="text"
              />,
              "initialValue": "Peter",
              "label": "Value",
              "name": "arguments.preferences.undefined.value",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "disabled": false,
                "onChange": [Function],
                "prefixCls": "ant-input",
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="ant-form-item-no-colon"
            >
              <div
                className="ant-form-item-label"
              >
                <label>
                   
                </label>
              </div>
              <div>
                <Button
                  block={false}
                  disabled={false}
                  ghost={false}
                  icon="close"
                  id="undefined.remove-row"
                  loading={false}
                  onClick={[Function]}
                  prefixCls="ant-btn"
                  title={null}
                  type="default"
                >
                  Remove Row
                </Button>
              </div>
            </div>,
            "span": 4,
            "style": Object {
              "textAlign": "right",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  className="ant-form-item-label"
                >
                  <label>
                     
                  </label>
                </div>,
                <div>
                  <Button
                    block={false}
                    disabled={false}
                    ghost={false}
                    icon="close"
                    id="undefined.remove-row"
                    loading={false}
                    onClick={[Function]}
                    prefixCls="ant-btn"
                    title={null}
                    type="default"
                  >
                    Remove Row
                  </Button>
                </div>,
              ],
              "className": "ant-form-item-no-colon",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <label>
                     
                  </label>,
                  "className": "ant-form-item-label",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": " ",
                  },
                  "ref": null,
                  "rendered": " ",
                  "type": "label",
                },
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <Button
                    block={false}
                    disabled={false}
                    ghost={false}
                    icon="close"
                    id="undefined.remove-row"
                    loading={false}
                    onClick={[Function]}
                    prefixCls="ant-btn"
                    title={null}
                    type="default"
                  >
                    Remove Row
                  </Button>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "block": false,
                    "children": "Remove Row",
                    "disabled": false,
                    "ghost": false,
                    "icon": "close",
                    "id": "undefined.remove-row",
                    "loading": false,
                    "onClick": [Function],
                    "prefixCls": "ant-btn",
                    "title": null,
                    "type": "default",
                  },
                  "ref": null,
                  "rendered": "Remove Row",
                  "type": [Function],
                },
                "type": "div",
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;

exports[`<PreferenceRolloutFields> should work 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Wrapper
    disabled={false}
    form={Object {}}
    recipeArguments={Immutable.Map {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "disabled": false,
      "form": Object {},
      "formErrors": undefined,
      "recipeArguments": Immutable.Map {},
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "disabled": false,
        "form": Object {},
        "formErrors": undefined,
        "recipeArguments": Immutable.Map {},
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
